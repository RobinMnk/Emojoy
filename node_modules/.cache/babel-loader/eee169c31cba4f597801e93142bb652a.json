{"ast":null,"code":"var _jsxFileName = \"/Users/berzanmikaili/Developer/hackatum2019/hackaTUM2019/src/components/PracticeAdvanced.tsx\";\nimport React from 'react';\nimport { Typography, Button, Row, Col, Table, Icon } from 'antd';\nimport FaceAPI from './faceapi';\nconst Title = Typography.Title;\nconst MAX_NUMBER_OF_ROWS = 3;\nconst SCORING_TYPE = 'fixed_rows';\nconst centerStyle = {\n  justifyContent: 'space-around',\n  display: 'flex'\n};\nconst emotions = ['neutral', 'happy', 'sad', 'surprised', 'angry'];\nexport class PracticeAdvanced extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getScore = () => SCORING_TYPE === \"fixed_rows\" ? \"Your Time: \".concat(this.state.score, \" seconds\") : \"Your Score: \".concat(this.state.score, \" points\");\n\n    this.state = {\n      loading: true,\n      phase: 'info',\n      emotionTable: [],\n      score: 0\n    };\n  }\n\n  setupGame() {\n    const emptyTable = [];\n    emptyTable.push(newEntry(1));\n    this.setState({\n      phase: 'playing',\n      emotionTable: emptyTable,\n      startTime: Date.now()\n    });\n  }\n\n  finishGame() {\n    let score = 0;\n\n    if (SCORING_TYPE === 'fixed_time') {\n      const rows = this.state.emotionTable.length - 1;\n      score = rows + numCorrect(this.state.emotionTable[rows]);\n    }\n\n    if (SCORING_TYPE === 'fixed_rows') {\n      const millis = Date.now() - this.state.startTime;\n      score = Math.floor(millis / 1000);\n    }\n\n    this.setState({\n      phase: 'finished',\n      score: score\n    });\n  }\n\n  emotionChange(em) {\n    console.log(\"incoming: \", em);\n\n    if (this.state.phase === 'playing') {\n      const table = this.state.emotionTable;\n      const currentEntry = table[table.length - 1];\n\n      if (currentEntry[em] === 'open') {\n        table.pop();\n        currentEntry[em] = 'done';\n        table.push(currentEntry);\n\n        if (isDone(currentEntry)) {\n          if (table.length === MAX_NUMBER_OF_ROWS) {\n            this.finishGame();\n            return;\n          }\n\n          table.push(newEntry(table.length + 1));\n        }\n\n        this.setState({\n          emotionTable: table\n        });\n      }\n    }\n  }\n\n  renderAux() {\n    if (this.state.phase === 'info') {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Emotion Change\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \" Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gube ... \"), React.createElement(\"div\", {\n        style: {\n          justifyContent: 'space-around',\n          display: 'flex'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: () => this.setupGame(),\n        type: \"primary\",\n        loading: this.state.loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, this.state.loading ? \"Loading ...\" : \"Start!\")));\n    }\n\n    if (this.state.phase === 'playing' || this.state.phase === 'finished') {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"Emotion Change\"), React.createElement(TableComponent, {\n        data: this.state.emotionTable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), this.state.phase === 'finished' ? React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        style: {\n          justifyContent: 'space-around',\n          display: 'flex'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(Title, {\n        level: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Finished! \", this.getScore())), React.createElement(\"div\", {\n        style: centerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: () => this.setState({\n          phase: 'info'\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"Back\"), React.createElement(Button, {\n        type: \"primary\",\n        onClick: () => this.setupGame(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Play again\"))) : null);\n    }\n  }\n\n  render() {\n    return React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 16,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(FaceAPI, {\n      setEmotion: em => this.emotionChange(em),\n      noCenter: true,\n      onRunning: () => this.setState({\n        loading: false\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    })), React.createElement(Col, {\n      span: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, this.renderAux()));\n  }\n\n}\n\nconst isDone = entry => {\n  let done = true;\n  emotions.forEach(em => {\n    if (entry[em] === 'open') {\n      done = false;\n    }\n  });\n  return done;\n};\n\nconst numCorrect = entry => emotions.filter(em => entry[em] === 'done').length;\n\nconst newEntry = round => {\n  const entry = {};\n  entry['round'] = round;\n  emotions.forEach(em => {\n    entry[em] = 'open';\n  });\n  return entry;\n};\n\nconst columns = () => {\n  const cols = emotions.map(em => ({\n    title: em,\n    dataIndex: em,\n    key: em,\n    render: done => renderDone(done)\n  }));\n  cols.unshift({\n    title: '#',\n    dataIndex: 'round',\n    key: 'round',\n    render: x => x\n  });\n  return cols;\n};\n\nconst renderDone = done => React.createElement(\"div\", {\n  style: centerStyle,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 216\n  },\n  __self: this\n}, done === 'done' ? React.createElement(Icon, {\n  type: \"check-circle\",\n  theme: \"twoTone\",\n  twoToneColor: \"#52c41a\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 218\n  },\n  __self: this\n}) : React.createElement(Icon, {\n  type: \"minus-circle\",\n  theme: \"twoTone\",\n  twoToneColor: \"#eb2f96\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 220\n  },\n  __self: this\n}));\n\nconst TableComponent = props => {\n  return React.createElement(Table, {\n    columns: columns(),\n    dataSource: props.data,\n    pagination: false,\n    size: 'small',\n    bordered: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/berzanmikaili/Developer/hackatum2019/hackaTUM2019/src/components/PracticeAdvanced.tsx"],"names":["React","Typography","Button","Row","Col","Table","Icon","FaceAPI","Title","MAX_NUMBER_OF_ROWS","SCORING_TYPE","centerStyle","justifyContent","display","emotions","PracticeAdvanced","Component","constructor","props","getScore","state","score","loading","phase","emotionTable","setupGame","emptyTable","push","newEntry","setState","startTime","Date","now","finishGame","rows","length","numCorrect","millis","Math","floor","emotionChange","em","console","log","table","currentEntry","pop","isDone","renderAux","render","entry","done","forEach","filter","round","columns","cols","map","title","dataIndex","key","renderDone","unshift","x","TableComponent","data"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,GAA7B,EAAkCC,GAAlC,EAAuCC,KAAvC,EAA8CC,IAA9C,QAA0D,MAA1D;AACA,OAAOC,OAAP,MAAiC,WAAjC;MACQC,K,GAAUP,U,CAAVO,K;AAER,MAAMC,kBAAkB,GAAG,CAA3B;AACA,MAAMC,YAA0C,GAAG,YAAnD;AAEA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,cAAc,EAAE,cADA;AAEhBC,EAAAA,OAAO,EAAE;AAFO,CAApB;AAKA,MAAMC,QAAQ,GAAG,CAAC,SAAD,EAAY,OAAZ,EAAqB,KAArB,EAA4B,WAA5B,EAAyC,OAAzC,CAAjB;AAwBA,OAAO,MAAMC,gBAAN,SAA+Bf,KAAK,CAACgB,SAArC,CAA+D;AAClEC,EAAAA,WAAW,CAACC,KAAD,EAA0B;AACjC,UAAMA,KAAN;;AADiC,SAuCrCC,QAvCqC,GAuC1B,MACPT,YAAY,KAAK,YAAjB,wBACkB,KAAKU,KAAL,CAAWC,KAD7B,sCAGmB,KAAKD,KAAL,CAAWC,KAH9B,YAxCiC;;AAEjC,SAAKD,KAAL,GAAa;AACTE,MAAAA,OAAO,EAAE,IADA;AAETC,MAAAA,KAAK,EAAC,MAFG;AAGTC,MAAAA,YAAY,EAAE,EAHL;AAITH,MAAAA,KAAK,EAAE;AAJE,KAAb;AAMH;;AAEDI,EAAAA,SAAS,GAAG;AACR,UAAMC,UAAU,GAAG,EAAnB;AACAA,IAAAA,UAAU,CAACC,IAAX,CAAgBC,QAAQ,CAAC,CAAD,CAAxB;AAEA,SAAKC,QAAL,CAAc;AACVN,MAAAA,KAAK,EAAE,SADG;AAEVC,MAAAA,YAAY,EAAEE,UAFJ;AAGVI,MAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAHD,KAAd;AAKH;;AAEDC,EAAAA,UAAU,GAAG;AACT,QAAIZ,KAAK,GAAG,CAAZ;;AACA,QAAGX,YAAY,KAAK,YAApB,EAAkC;AAC9B,YAAMwB,IAAI,GAAG,KAAKd,KAAL,CAAWI,YAAX,CAAwBW,MAAxB,GAA+B,CAA5C;AACAd,MAAAA,KAAK,GAAGa,IAAI,GAAGE,UAAU,CAAC,KAAKhB,KAAL,CAAWI,YAAX,CAAwBU,IAAxB,CAAD,CAAzB;AACH;;AAED,QAAGxB,YAAY,KAAK,YAApB,EAAkC;AAC9B,YAAM2B,MAAM,GAAGN,IAAI,CAACC,GAAL,KAAa,KAAKZ,KAAL,CAAWU,SAAvC;AACAT,MAAAA,KAAK,GAAGiB,IAAI,CAACC,KAAL,CAAWF,MAAM,GAAC,IAAlB,CAAR;AACH;;AAED,SAAKR,QAAL,CAAc;AACVN,MAAAA,KAAK,EAAE,UADG;AAEVF,MAAAA,KAAK,EAAEA;AAFG,KAAd;AAIH;;AAUDmB,EAAAA,aAAa,CAACC,EAAD,EAAc;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,EAA1B;;AACA,QAAG,KAAKrB,KAAL,CAAWG,KAAX,KAAqB,SAAxB,EAAmC;AAC/B,YAAMqB,KAAK,GAAG,KAAKxB,KAAL,CAAWI,YAAzB;AACA,YAAMqB,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACT,MAAN,GAAa,CAAd,CAA1B;;AAEA,UAAGU,YAAY,CAACJ,EAAD,CAAZ,KAA+B,MAAlC,EAA0C;AACtCG,QAAAA,KAAK,CAACE,GAAN;AACAD,QAAAA,YAAY,CAACJ,EAAD,CAAZ,GAAmB,MAAnB;AACAG,QAAAA,KAAK,CAACjB,IAAN,CAAWkB,YAAX;;AAEA,YAAGE,MAAM,CAACF,YAAD,CAAT,EAAyB;AAErB,cAAGD,KAAK,CAACT,MAAN,KAAiB1B,kBAApB,EAAwC;AACpC,iBAAKwB,UAAL;AACA;AACH;;AAEDW,UAAAA,KAAK,CAACjB,IAAN,CAAWC,QAAQ,CAACgB,KAAK,CAACT,MAAN,GAAa,CAAd,CAAnB;AACH;;AACD,aAAKN,QAAL,CAAc;AACVL,UAAAA,YAAY,EAAEoB;AADJ,SAAd;AAGH;AACJ;AACJ;;AAEDI,EAAAA,SAAS,GAAG;AACR,QAAG,KAAK5B,KAAL,CAAWG,KAAX,KAAqB,MAAxB,EAAgC;AAC5B,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2PAFJ,EAII;AAAK,QAAA,KAAK,EAAE;AAAEX,UAAAA,cAAc,EAAE,cAAlB;AAAkCC,UAAAA,OAAO,EAAE;AAA3C,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AACI,QAAA,OAAO,EAAE,MAAM,KAAKY,SAAL,EADnB;AAEI,QAAA,IAAI,EAAC,SAFT;AAGI,QAAA,OAAO,EAAE,KAAKL,KAAL,CAAWE,OAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKK,KAAKF,KAAL,CAAWE,OAAX,GAAqB,aAArB,GAAqC,QAL1C,CADJ,CAJJ,CADJ;AAgBH;;AACD,QAAI,KAAKF,KAAL,CAAWG,KAAX,KAAqB,SAArB,IAAkC,KAAKH,KAAL,CAAWG,KAAX,KAAqB,UAA3D,EAAuE;AACnE,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,EAEI,oBAAC,cAAD;AACI,QAAA,IAAI,EAAE,KAAKH,KAAL,CAAWI,YADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAKK,KAAKJ,KAAL,CAAWG,KAAX,KAAqB,UAArB,GACG,0CACI;AAAK,QAAA,KAAK,EAAE;AAAEX,UAAAA,cAAc,EAAE,cAAlB;AAAkCC,UAAAA,OAAO,EAAE;AAA3C,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAE,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAA4B,KAAKM,QAAL,EAA5B,CADJ,CADJ,EAII;AAAK,QAAA,KAAK,EAAER,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AACI,QAAA,OAAO,EAAE,MAAM,KAAKkB,QAAL,CAAc;AAACN,UAAAA,KAAK,EAAE;AAAR,SAAd,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAII,oBAAC,MAAD;AACI,QAAA,IAAI,EAAC,SADT;AAEI,QAAA,OAAO,EAAE,MAAM,KAAKE,SAAL,EAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJJ,CAJJ,CADH,GAeG,IApBR,CADJ;AAwBH;AACJ;;AAEDwB,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,OAAD;AACI,MAAA,UAAU,EAAER,EAAE,IAAI,KAAKD,aAAL,CAAmBC,EAAnB,CADtB;AAEI,MAAA,QAAQ,EAAE,IAFd;AAGI,MAAA,SAAS,EAAE,MAAM,KAAKZ,QAAL,CAAc;AAACP,QAAAA,OAAO,EAAE;AAAV,OAAd,CAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,EAQI,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAe,KAAK0B,SAAL,EAAf,CARJ,CADJ;AAYH;;AAvIiE;;AA0ItE,MAAMD,MAAM,GAAIG,KAAD,IAAkB;AAC7B,MAAIC,IAAI,GAAG,IAAX;AACArC,EAAAA,QAAQ,CAACsC,OAAT,CAAiBX,EAAE,IAAI;AACnB,QAAGS,KAAK,CAACT,EAAD,CAAL,KAAc,MAAjB,EAAwB;AACpBU,MAAAA,IAAI,GAAG,KAAP;AACH;AACJ,GAJD;AAKA,SAAOA,IAAP;AACH,CARD;;AAUA,MAAMf,UAAU,GAAIc,KAAD,IACfpC,QAAQ,CAACuC,MAAT,CAAgBZ,EAAE,IAAIS,KAAK,CAACT,EAAD,CAAL,KAAc,MAApC,EAA4CN,MADhD;;AAGA,MAAMP,QAAQ,GAAI0B,KAAD,IAA2B;AACxC,QAAMJ,KAAY,GAAG,EAArB;AACAA,EAAAA,KAAK,CAAC,OAAD,CAAL,GAAiBI,KAAjB;AACAxC,EAAAA,QAAQ,CAACsC,OAAT,CAAiBX,EAAE,IAAI;AACnBS,IAAAA,KAAK,CAACT,EAAD,CAAL,GAAY,MAAZ;AACH,GAFD;AAGA,SAAOS,KAAP;AACH,CAPD;;AASA,MAAMK,OAAO,GAAG,MAAM;AAClB,QAAMC,IAAI,GAAG1C,QAAQ,CAAC2C,GAAT,CAAahB,EAAE,KAAK;AAC7BiB,IAAAA,KAAK,EAAEjB,EADsB;AAE7BkB,IAAAA,SAAS,EAAElB,EAFkB;AAG7BmB,IAAAA,GAAG,EAAEnB,EAHwB;AAI7BQ,IAAAA,MAAM,EAAGE,IAAD,IAAeU,UAAU,CAACV,IAAD;AAJJ,GAAL,CAAf,CAAb;AAOAK,EAAAA,IAAI,CAACM,OAAL,CAAa;AACTJ,IAAAA,KAAK,EAAE,GADE;AAETC,IAAAA,SAAS,EAAE,OAFF;AAGTC,IAAAA,GAAG,EAAE,OAHI;AAITX,IAAAA,MAAM,EAAGc,CAAD,IAAYA;AAJX,GAAb;AAMA,SAAOP,IAAP;AACH,CAfD;;AAiBA,MAAMK,UAAU,GAAIV,IAAD,IACf;AAAK,EAAA,KAAK,EAAExC,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACMwC,IAAI,KAAK,MAAV,GACG,oBAAC,IAAD;AAAM,EAAA,IAAI,EAAC,cAAX;AAA0B,EAAA,KAAK,EAAC,SAAhC;AAA0C,EAAA,YAAY,EAAC,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADH,GAGG,oBAAC,IAAD;AAAM,EAAA,IAAI,EAAC,cAAX;AAA0B,EAAA,KAAK,EAAC,SAAhC;AAA0C,EAAA,YAAY,EAAC,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAJR,CADJ;;AAUA,MAAMa,cAAc,GAAI9C,KAAD,IAAgB;AACnC,SACI,oBAAC,KAAD;AACI,IAAA,OAAO,EAAEqC,OAAO,EADpB;AAEI,IAAA,UAAU,EAAErC,KAAK,CAAC+C,IAFtB;AAGI,IAAA,UAAU,EAAE,KAHhB;AAII,IAAA,IAAI,EAAE,OAJV;AAKI,IAAA,QAAQ,EAAE,IALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AASH,CAVD","sourcesContent":["import React from 'react'\nimport { Typography, Button, Row, Col, Table, Icon } from 'antd';\nimport FaceAPI, { Emotion } from './faceapi';\nconst { Title } = Typography;\n\nconst MAX_NUMBER_OF_ROWS = 3;\nconst SCORING_TYPE : 'fixed_time' | 'fixed_rows' = 'fixed_rows';\n\nconst centerStyle = {\n    justifyContent: 'space-around',\n    display: 'flex'\n};\n\nconst emotions = ['neutral', 'happy', 'sad', 'surprised', 'angry'];\ntype EmState = 'open' | 'done'\n\ninterface Entry {\n    round: number;\n    neutral: EmState;\n    happy: EmState;\n    sad: EmState;\n    surprised: EmState;\n    angry: EmState;\n}\n\ninterface IProps {\n\n}\n\ninterface IState {\n    loading: boolean;\n    phase: 'info' | 'playing' | 'finished'\n    emotionTable: Entry[];\n    score: number;\n    startTime?: number;\n}\n\nexport class PracticeAdvanced extends React.Component<IProps, IState> {\n    constructor(props: Readonly<IProps>) {\n        super(props);\n        this.state = {\n            loading: true,\n            phase:'info',\n            emotionTable: [],\n            score: 0,\n        };\n    }\n\n    setupGame() {\n        const emptyTable = [];\n        emptyTable.push(newEntry(1));\n\n        this.setState({\n            phase: 'playing',\n            emotionTable: emptyTable,\n            startTime: Date.now()\n        });\n    }\n\n    finishGame() {\n        let score = 0;\n        if(SCORING_TYPE === 'fixed_time') {\n            const rows = this.state.emotionTable.length-1;\n            score = rows + numCorrect(this.state.emotionTable[rows])\n        }\n\n        if(SCORING_TYPE === 'fixed_rows') {\n            const millis = Date.now() - this.state.startTime;\n            score = Math.floor(millis/1000);\n        }\n\n        this.setState({\n            phase: 'finished',\n            score: score\n        });\n    }\n\n    getScore = () => (\n        SCORING_TYPE === \"fixed_rows\" ? (\n            `Your Time: ${this.state.score} seconds`\n        ) : (\n            `Your Score: ${this.state.score} points`\n        )\n    );\n\n    emotionChange(em: Emotion) {\n        console.log(\"incoming: \", em);\n        if(this.state.phase === 'playing') {\n            const table = this.state.emotionTable;\n            const currentEntry = table[table.length-1];\n            \n            if(currentEntry[em as string] === 'open') {\n                table.pop();\n                currentEntry[em] = 'done';\n                table.push(currentEntry);\n\n                if(isDone(currentEntry)) {\n\n                    if(table.length === MAX_NUMBER_OF_ROWS) {\n                        this.finishGame();\n                        return;\n                    }\n\n                    table.push(newEntry(table.length+1));\n                }\n                this.setState({\n                    emotionTable: table,\n                });\n            }\n        }\n    }\n\n    renderAux() {\n        if(this.state.phase === 'info') {\n            return (\n                <div>\n                    <Title>Emotion Change</Title>\n                    <p> Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gube ... </p>\n\n                    <div style={{ justifyContent: 'space-around', display: 'flex' }}>\n                        <Button\n                            onClick={() => this.setupGame()}\n                            type='primary'\n                            loading={this.state.loading}\n                        > \n                            {this.state.loading ? \"Loading ...\" : \"Start!\"}\n                        </Button>\n                    </div>\n                </div>\n            );\n        }\n        if (this.state.phase === 'playing' || this.state.phase === 'finished') {\n            return (\n                <div>\n                    <Title>Emotion Change</Title>\n                    <TableComponent\n                        data={this.state.emotionTable}\n                    />\n                    {this.state.phase === 'finished' ? (\n                        <>\n                            <div style={{ justifyContent: 'space-around', display: 'flex' }}>\n                                <Title level={4}>Finished! {this.getScore()}</Title>\n                            </div>\n                            <div style={centerStyle}>\n                                <Button\n                                    onClick={() => this.setState({phase: 'info'})}\n                                >Back</Button>\n                                <Button\n                                    type='primary'\n                                    onClick={() => this.setupGame()}\n                                >Play again</Button>\n                            </div>\n                        </>\n                    ) : null }\n                </div>\n            );\n        }\n    }\n\n    render() {\n        return (\n            <Row>\n                <Col span={16}>\n                    <FaceAPI\n                        setEmotion={em => this.emotionChange(em)}\n                        noCenter={true}\n                        onRunning={() => this.setState({loading: false})}\n                    />\n                </Col>\n                <Col span={8}>{this.renderAux()}</Col>\n            </Row>\n        );\n    }\n}\n\nconst isDone = (entry: Entry) => {\n    let done = true;\n    emotions.forEach(em => {\n        if(entry[em] === 'open'){\n            done = false;\n        }\n    });\n    return done;\n}\n\nconst numCorrect = (entry: Entry) =>\n    emotions.filter(em => entry[em] === 'done').length;\n\nconst newEntry = (round: number) : Entry => {\n    const entry: Entry = {} as Entry;\n    entry['round'] = round;\n    emotions.forEach(em => {\n        entry[em] = 'open';\n    });\n    return entry;\n}\n\nconst columns = () => {\n    const cols = emotions.map(em => ({\n        title: em,\n        dataIndex: em,\n        key: em,\n        render: (done: any) => renderDone(done),\n    }));\n\n    cols.unshift({\n        title: '#',\n        dataIndex: 'round',\n        key: 'round',\n        render: (x: any) => x,\n    });\n    return cols;\n}\n\nconst renderDone = (done: EmState) => (\n    <div style={centerStyle}>\n        {(done === 'done') ? (\n            <Icon type=\"check-circle\" theme=\"twoTone\" twoToneColor=\"#52c41a\" />\n        ) : (\n            <Icon type=\"minus-circle\" theme=\"twoTone\" twoToneColor=\"#eb2f96\" />\n        )}\n    </div>\n)\n\nconst TableComponent = (props: any) => {\n    return(\n        <Table\n            columns={columns()}\n            dataSource={props.data}\n            pagination={false}\n            size={'small'}\n            bordered={true}\n        />\n    );\n}\n"]},"metadata":{},"sourceType":"module"}